{"version":3,"sources":["components/Character.js","components/ListOfCharacters.js","components/Spinner.js","services/getCharacters.js","hooks/useCharacters.js","pages/Board.js","hooks/useNearBottonScreen.js","App.js","reportWebVitals.js","index.js"],"names":["Character","image","name","specie","className","src","alt","ListOfCharacters","characters","map","item","species","id","Spinner","API_RICKANDMORTY","window","_env_","useCharacters","useState","setCharacters","searching","setSearching","page","setPage","useEffect","RESOURCE","url","fetch","then","response","json","results","getCharacters","prevCharacters","concat","finally","Board","externalRef","useRef","isNearScreen","distance","once","setShow","fromRef","observer","element","current","IntersectionObserver","entries","isIntersecting","disconnect","rootMargin","observe","useNearBottonScreen","debounceHandleNextPage","useCallback","debounce","currentPage","ref","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mTAGe,SAASA,EAAT,GAA6C,IAAxBC,EAAuB,EAAvBA,MAAOC,EAAgB,EAAhBA,KAAMC,EAAU,EAAVA,OAE7C,OACI,sBAAKC,UAAU,sBAAf,UACI,6BAAKF,IACL,6BAAKC,IACL,qBAAKE,IAAKJ,EAAOK,IAAI,Q,MCLlB,SAASC,EAAT,GAA2C,IAAfC,EAAc,EAAdA,WAcvC,OAVQ,yBAASJ,UAAU,uBAAnB,SACKI,EAAWC,KAAI,SAAAC,GAAI,OAChB,cAAC,EAAD,CAAWT,MAAOS,EAAKT,MAEnBC,KAAMQ,EAAKR,KACXC,OAAQO,EAAKC,SAFRD,EAAKE,S,UCJnBC,EAJC,kBAAM,qBAAKT,UAAU,oBAAf,SAClB,qBAAKA,UAAU,e,OCJbU,EAAmBC,OAAOC,MAAMF,iBCKvB,SAASG,IAAiB,IAAD,EAEAC,mBAAS,IAFT,mBAE7BV,EAF6B,KAEjBW,EAFiB,OAGFD,oBAAS,GAHP,mBAG7BE,EAH6B,KAGlBC,EAHkB,OAIZH,mBANP,GAEmB,mBAI7BI,EAJ6B,KAIvBC,EAJuB,KAkBpC,OAZAC,qBAAU,WACNH,GAAa,GDVN,YAAsC,IAAD,IAAZC,KAE9BG,EAAQ,+BAFkC,MAAL,EAAK,GAG1CC,EAAG,UAAMZ,GAAN,OAAyBW,GAElC,OAAOE,MAAMD,GACRE,MAAK,SAAAC,GACF,OAAOA,EAASC,UAEnBF,MAAK,SAAAC,GAEF,OADoBA,EAAZE,WCEZC,CAAc,CAAEV,KAAMA,IACjBM,MAAK,SAAAC,GACFV,GAAc,SAAAc,GAAc,OAAIA,EAAeC,OAAOL,SAEzDM,QACGd,GAAa,MAEtB,CAACC,IAEG,CAAEd,aAAYY,YAAWG,W,0BCfrB,SAASa,IAAS,IAAD,EAEqBnB,IAAzCT,EAFoB,EAEpBA,WAAYY,EAFQ,EAERA,UAAiBG,GAFT,EAEGD,KAFH,EAESC,SAE/Bc,EAAcC,mBAEZC,ECZG,WAAqF,IAAD,yDAAJ,GAAI,IAArDC,gBAAqD,MAA1C,QAA0C,EAAjCH,EAAiC,EAAjCA,YAAiC,IAApBI,YAAoB,WAE/DvB,oBAAS,GAFsD,mBAExFqB,EAFwF,KAE1EG,EAF0E,KAGzFC,EAAUL,mBA6BhB,OA3BAd,qBAAU,WAEN,IAAIoB,EAEEC,EAAUR,EAAcA,EAAYS,QAAUH,EAAQG,QAoB5D,OANAF,EAAW,IAAIG,sBAZE,SAACC,EAASJ,GAEZI,EAAQ,GAEZC,gBACHP,GAAQ,GACRD,GAAQG,EAASM,eAEhBT,GAAQC,GAAQ,KAIqB,CAC1CS,WAAYX,IAGZK,GAASD,EAASQ,QAAQP,GAEvB,kBAAMD,GAAYA,EAASM,iBAG/B,CAAEX,eAAcI,WDpBEU,CAAoB,CACzChB,YAAajB,EAAY,KAAOiB,EAChCI,MAAM,IAFFF,aAKFe,EAAyBC,sBAAYC,KACvC,kBAAMjC,GAAQ,SAAAkC,GAAW,OAAIA,EAAc,OAAI,KAChD,CAAClC,IAOJ,OALAC,qBAAU,WACFe,GAAce,MACnB,CAACA,EAAwBf,IAGxBnB,EAAkB,cAAC,EAAD,IAGlB,qCACI,oBAAIhB,UAAU,cAAd,6BACA,cAAC,EAAD,CAAkBI,WAAYA,IAC9B,yBAASJ,UAAU,eAAeQ,GAAG,aAAa8C,IAAKrB,EAAvD,SACI,cAAC,EAAD,SEvBDsB,MATf,WAEE,OACE,qBAAKvD,UAAU,gBAAf,SACE,cAAC,EAAD,OCKSwD,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBlC,MAAK,YAAkD,IAA/CmC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.81251beb.chunk.js","sourcesContent":["import React from 'react'\r\nimport './Character.css'\r\n\r\nexport default function Character({ image, name, specie }) {\r\n\r\n    return (\r\n        <div className=\"character-container\">\r\n            <h2>{name}</h2>\r\n            <h3>{specie}</h3>\r\n            <img src={image} alt=\"\" />\r\n        </div>\r\n    )\r\n}","import Character from 'components/Character';\r\nimport React from 'react';\r\nimport './ListOfCharacters.css';\r\n\r\nexport default function ListOfCharacters({ characters }) {\r\n\r\n    const renderCharacters = () => {\r\n        return (\r\n            <section className=\"characters-container\">\r\n                {characters.map(item =>\r\n                    <Character image={item.image}\r\n                        key={item.id}\r\n                        name={item.name}\r\n                        specie={item.species} />\r\n                )}\r\n            </section>)\r\n    }\r\n\r\n    return (\r\n        renderCharacters()\r\n    )\r\n}","import React from 'react'\r\nimport './Spinner.css'\r\n\r\nconst Spinner = () => <div className=\"spinner-container\" >\r\n    <div className=\"spinner\" />\r\n</div>\r\n\r\nexport default Spinner;","const API_RICKANDMORTY = window._env_.API_RICKANDMORTY;\r\n\r\nexport default function getCharacters({ page = 1 }) {\r\n\r\n    const RESOURCE = `character/?page=${page}`\r\n    const url = `${API_RICKANDMORTY}${RESOURCE}`\r\n\r\n    return fetch(url)\r\n        .then(response => {\r\n            return response.json()\r\n        })\r\n        .then(response => {\r\n            const { results } = response\r\n            return results\r\n        })\r\n\r\n}","import React, { useEffect, useState } from 'react'\r\nimport getCharacters from 'services/getCharacters'\r\n\r\nconst INITIAL_PAGE = 1\r\n\r\nexport default function useCharacters() {\r\n\r\n    const [characters, setCharacters] = useState([])\r\n    const [searching, setSearching] = useState(false)\r\n    const [page, setPage] = useState(INITIAL_PAGE)\r\n\r\n    useEffect(() => {\r\n        setSearching(true)\r\n              \r\n        getCharacters({ page: page })\r\n            .then(response => {\r\n                setCharacters(prevCharacters => prevCharacters.concat(response))\r\n            })\r\n            .finally(\r\n                setSearching(false)\r\n            )\r\n    }, [page])\r\n\r\n    return { characters, searching, setPage }\r\n}","import ListOfCharacters from 'components/ListOfCharacters';\r\nimport Spinner from 'components/Spinner';\r\nimport useCharacters from 'hooks/useCharacters';\r\nimport useNearBottonScreen from 'hooks/useNearBottonScreen';\r\nimport debounce from 'just-debounce-it';\r\nimport React, { useCallback, useEffect, useRef } from 'react';\r\nimport './Board.css';\r\n\r\nexport default function Board() {\r\n\r\n    const { characters, searching, page, setPage } = useCharacters()\r\n\r\n    const externalRef = useRef()\r\n\r\n    const { isNearScreen } = useNearBottonScreen({\r\n        externalRef: searching ? null : externalRef,\r\n        once: false\r\n    })\r\n\r\n    const debounceHandleNextPage = useCallback(debounce(\r\n        () => setPage(currentPage => currentPage + 1), 200\r\n    ), [setPage])\r\n\r\n    useEffect(() => {\r\n        if (isNearScreen) debounceHandleNextPage()\r\n    }, [debounceHandleNextPage, isNearScreen])\r\n\r\n\r\n    if (searching) return <Spinner />\r\n\r\n    return (\r\n        <>\r\n            <h1 className=\"board-title\">Infinity Scroll</h1>\r\n            <ListOfCharacters characters={characters} />\r\n            <section className=\"board-footer\" id='observable' ref={externalRef}>\r\n                <Spinner />\r\n            </section>\r\n        </>\r\n    )\r\n}","import { useEffect, useRef, useState } from 'react'\r\n\r\nexport default function useNearBottonScreen({ distance = '100px', externalRef, once = true } = {}) {\r\n\r\n    const [isNearScreen, setShow] = useState(false)\r\n    const fromRef = useRef()\r\n\r\n    useEffect(() => {\r\n\r\n        let observer\r\n\r\n        const element = externalRef ? externalRef.current : fromRef.current\r\n\r\n        const onChange = (entries, observer) => {\r\n        \r\n            const el = entries[0]\r\n        \r\n            if (el.isIntersecting) {\r\n                setShow(true)\r\n                once && observer.disconnect()\r\n            } else {\r\n                !once && setShow(false)\r\n            }\r\n        }\r\n\r\n        observer = new IntersectionObserver(onChange, {\r\n            rootMargin: distance\r\n        })\r\n        \r\n        if (element) observer.observe(element)\r\n\r\n        return () => observer && observer.disconnect()\r\n    })\r\n\r\n    return { isNearScreen, fromRef }\r\n}","import Board from 'pages/Board';\nimport React from 'react';\n\nfunction App() {\n\n  return (\n    <div className=\"app-container\">\n      <Board />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}